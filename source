local Players = game:GetService("Players")

-- Function to send a notification
local function sendNotification(title, text, duration)
    local player = Players.LocalPlayer
    player:WaitForChild("PlayerGui")
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration -- Duration in seconds
    })
end

sendNotification("Credits", "Joshuatszpock on GitHub", 3)
local TeleportService = game:GetService("TeleportService")

 --Gui
local screenGui = Instance.new("ScreenGui")
local frame = Instance.new("Frame")
local timerLabel = Instance.new("TextLabel")
local controlButton = Instance.new("TextButton")
local timerInput = Instance.new("TextBox")

screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

-- Frame properties
frame.Parent = screenGui
frame.Size = UDim2.new(0.3, 0, 0.4, 0)
frame.Position = UDim2.new(0.5, -frame.Size.X.Offset / 2, 0.5, -frame.Size.Y.Offset / 2)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.BackgroundTransparency = 0.5 -- Set transparency to 0.5
frame.BorderSizePixel = 0

-- Timer Label
timerLabel.Parent = frame
timerLabel.Size = UDim2.new(1, 0, 0.5, 0)
timerLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
timerLabel.TextScaled = true
timerLabel.BackgroundTransparency = 1
timerLabel.Text = "30" -- Default countdown time

-- Timer Input
timerInput.Parent = frame
timerInput.Size = UDim2.new(1, 0, 0.2, 0)
timerInput.Position = UDim2.new(0, 0, 0.5, 0)
timerInput.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
timerInput.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Gray background
timerInput.PlaceholderText = "Enter time in seconds"
timerInput.TextScaled = true
timerInput.Text = "30" -- Set default timer input to 30 seconds

-- Control Button
controlButton.Parent = frame
controlButton.Size = UDim2.new(1, 0, 0.3, 0)
controlButton.Position = UDim2.new(0, 0, 0.7, 0)
controlButton.Text = "Stop" -- Change to Stop since the timer starts activated
controlButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
controlButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red background
controlButton.TextScaled = true

local isTimerRunning = true -- Set to true to start the timer
local countdown = tonumber(timerInput.Text) or 30 -- Default countdown time
local timerCoroutine -- Variable to hold the coroutine

-- Function to send a notification
local function sendNotification(title, text)
    local player = Players.LocalPlayer
    player:WaitForChild("PlayerGui")
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = 5 -- Duration in seconds
    })
end

-- Function to server hop
local function serverHop()
    local placeId = game.PlaceId
    local currentServerId = game.JobId -- Get the current server ID
    local availableServers = TeleportService:GetServerAsync(placeId) -- Get available servers

    -- Filter out the current server
    local serversToJoin = {}
    for _, server in ipairs(availableServers) do
        if server.id ~= currentServerId then
            table.insert(serversToJoin, server)
        end
    end

    -- Check if there are any servers to join
    if #serversToJoin > 0 then
        local serverToJoin = serversToJoin[math.random(1, #serversToJoin)] -- Randomly select a server
        TeleportService:TeleportToPlaceInstance(placeId, serverToJoin.id, Players.LocalPlayer) -- Join the selected server
    else
        sendNotification("Script failed", "Cannot find an empty server.")
    end
end

-- Timer function
local function startTimer()
    while countdown > 0 and isTimerRunning do
        timerLabel.Text = tostring(countdown) -- Update the text label with the countdown
        task.wait(1) -- Wait for 1 second
        countdown = countdown - 1
    end

    if countdown <= 0 and isTimerRunning then
        timerLabel.Text = "Serverhopping!"
        isTimerRunning = true -- Ensure the timer is running for server hopping
        while isTimerRunning do
            serverHop()
            task.wait(0.1) -- Wait for 0.1 seconds before trying to hop again
        end
    end
end

-- Start the timer immediately in a coroutine
timerCoroutine = coroutine.create(startTimer)
coroutine.resume(timerCoroutine)

-- Control Button functionality
controlButton.MouseButton1Click:Connect(function()
    if isTimerRunning then
        isTimerRunning = false
        controlButton.Text = "Start"
        controlButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green background
    else
        local inputTime = tonumber(timerInput.Text)
        if inputTime and inputTime > 0 then
            countdown = inputTime -- Set countdown to user input
            isTimerRunning = true
            controlButton.Text = "Stop"
            controlButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red background
            timerCoroutine = coroutine.create(startTimer) -- Create a new coroutine for the timer
            coroutine.resume(timerCoroutine) -- Start the timer
        else
            timerLabel.Text = "Invalid time!"
        end
    end
end)
